//#define WIN32_LEAN_AND_MEAN
//#define _CRT_SECURE_NO_WARNINGS
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//
//#include <string>
//#include <winsock.h>
//#include <winsock2.h>
//#include <openssl/bio.h> /* BasicInput/Output streams */
//#include <openssl/err.h> /* errors */
//#include <openssl/ssl.h> /* core library */
//#include <stdio.h>
//#include <stdlib.h>
//
//#include "SaltEncoder.h"
//
//#define BuffSize 1024
//#define _SERVER_PORTCNT 5
//#define _SEVER_MAXACCEPT 5
//
//#define _SSLCERT_SALT 4
//
//#define _SSLCERT_SHA1 1
//#define _SSLCERT_SHA2 2
//
//#define _FREE_SSL_CTX(p) \
//  {                      \
//    if (p) {             \
//      SSL_CTX_free(p);   \
//      p = NULL;          \
//    }                    \
//  }
//
//
//#define _CLOSE_SOCKET(s)  \
//  {                       \
//    shutdown(s, SD_BOTH); \
//    closesocket(s);       \
//  }
//
//#define _FREE_SSL_CTX(p) \
//  {                      \
//    if (p) {             \
//      SSL_CTX_free(p);   \
//      p = NULL;          \
//    }                    \
//  }
//#define _CLOSE_SSL(s)             \
//  {                               \
//    if (0 == SSL_shutdown(ssl)) { \
//      SSL_shutdown(ssl);          \
//    }                             \
//    SSL_free(ssl);                \
//  }
//
//class CTCPServer {
// public:
//  CTCPServer(void);
//  ~CTCPServer(void);
//
// public:
//  void IncClientNumber() { lockIncrement(&m_clientNumber); }
//  void DecClientNumber() { lockDecrement(&m_clientNumber); }
//  int GetClientNumber() { return m_clientNumber; }
//
//  void SetRunState(BOOL bState);
//  BOOL GetRunState();
//
//  void LockThread() { ::EnterCriticalSection(&m_crtThread); }
//  void UnlockThread() { ::LeaveCriticalSection(&m_crtThread); }
//
// protected:
//  CRITICAL_SECTION m_crtSection;
//  CRITICAL_SECTION m_crtThread;
//
//  BOOL m_runState;
//  int m_clientNumber;
//
//  void lockIncrement(int* nValue);
//  void lockDecrement(int* nValue);
//  void sendServerGoodbye(int port);
//};
//
//class CTCPServerSSL2 : public CTCPServer {
// public:
//  CTCPServerSSL2(void);
//  ~CTCPServerSSL2(void);
//
//  static CTCPServerSSL2& GetInstance();
//
// public:
//  BOOL StartServer(int nServerPort);
//  void StopServer();
//  void Response(SSL* ssl, LPCTSTR szBuffer);
//
//  int m_nServerPort;
//
// protected:
//  HANDLE m_hServerThread;
//
//  //CResponseSaAT m_cSaAT;
//};
//
//#define theTCPServerSSL2 CTCPServerSSL2::GetInstance()
//
//std::string DecodeCertBuffer(const char buffer[], int size) {
//  std::string csEncode = "", csFmt = "";
//  for (int i = 0; i < size; i++) {
//    if ((i % (_SSLCERT_SALT + 1)) == 0)
//      ;
//    else {
//      char c[100];
//      sprintf(c,"%c", buffer[i] ^ _SSLCERT_SALT);
//      csEncode.append(c);
//    }
//  }
//
//  CSaltEncoder encoder(_SSLCERT_SALT);
//  return encoder.DecodeString(csEncode);
//}
//
//
//std::string GetKeyBuffer(int mode) {
//  const char key_buffer1[] = {0x00};  // sha1
//
//  const char key_buffer2[] = {
//      // sha256
//      0x75, 0x7e, 0x5c, 0x65, 0x41, 0x5d, 0x7e, 0x5c, 0x70, 0x37, 0x36, 0x71,
//      0x76, 0x60, 0x3c, 0x3c, 0x31, 0x5e, 0x5b, 0x5c, 0x32, 0x76, 0x65, 0x29,
//      0x75, 0x67, 0x76, 0x43, 0x3c, 0x3c, 0x6a, 0x32, 0x63, 0x43, 0x76, 0x5c,
//      0x71, 0x5c, 0x5b, 0x7e, 0x63, 0x71, 0x32, 0x63, 0x41, 0x48, 0x7e, 0x5c,
//      0x65, 0x41, 0x5c, 0x7e, 0x40, 0x61, 0x3d, 0x72, 0x5c, 0x76, 0x49, 0x43,
//      0x36, 0x6b, 0x43, 0x43, 0x3c, 0x60, 0x40, 0x63, 0x43, 0x5b, 0x30, 0x5c,
//      0x65, 0x3d, 0x5b, 0x41, 0x76, 0x76, 0x32, 0x5b, 0x41, 0x3d, 0x62, 0x5b,
//      0x51, 0x6a, 0x3d, 0x29, 0x35, 0x73, 0x43, 0x7d, 0x47, 0x75, 0x70, 0x76,
//      0x71, 0x74, 0x32, 0x61, 0x4b, 0x6b, 0x32, 0x43, 0x50, 0x4a, 0x60, 0x52,
//      0x6a, 0x70, 0x32, 0x76, 0x63, 0x40, 0x30, 0x4f, 0x5c, 0x53, 0x6f, 0x50,
//      0x60, 0x7d, 0x47, 0x3c, 0x61, 0x61, 0x48, 0x63, 0x43, 0x6e, 0x49, 0x6d,
//      0x76, 0x76, 0x54, 0x29, 0x5c, 0x65, 0x49, 0x62, 0x7c, 0x57, 0x76, 0x60,
//      0x4c, 0x6d, 0x31, 0x63, 0x43, 0x33, 0x57, 0x6b, 0x73, 0x75, 0x4c, 0x57,
//      0x68, 0x65, 0x60, 0x5c, 0x65, 0x37, 0x47, 0x61, 0x3c, 0x68, 0x48, 0x47,
//      0x61, 0x50, 0x6c, 0x36, 0x32, 0x63, 0x6a, 0x43, 0x68, 0x53, 0x49, 0x71,
//      0x53, 0x3d, 0x29, 0x32, 0x56, 0x73, 0x6d, 0x6d, 0x40, 0x30, 0x66, 0x6f,
//      0x63, 0x70, 0x71, 0x34, 0x6b, 0x76, 0x30, 0x61, 0x5c, 0x6f, 0x76, 0x3d,
//      0x67, 0x71, 0x60, 0x45, 0x32, 0x73, 0x35, 0x71, 0x29, 0x3c, 0x6f, 0x40,
//      0x68, 0x4f, 0x70, 0x43, 0x6a, 0x76, 0x73, 0x34, 0x41, 0x66, 0x40, 0x47,
//      0x43, 0x49, 0x52, 0x55, 0x76, 0x60, 0x6a, 0x74, 0x57, 0x62, 0x5b, 0x30,
//      0x7e, 0x32, 0x63, 0x77, 0x30, 0x56, 0x34, 0x73, 0x71, 0x5e, 0x69, 0x7d,
//      0x63, 0x30, 0x4a, 0x31, 0x32, 0x29, 0x60, 0x37, 0x3d, 0x57, 0x74, 0x5b,
//      0x65, 0x62, 0x48, 0x65, 0x75, 0x68, 0x72, 0x6f, 0x62, 0x77, 0x4f, 0x62,
//      0x36, 0x29, 0x75, 0x4f, 0x6e, 0x36, 0x6d, 0x6a, 0x67, 0x65, 0x7e, 0x73,
//      0x40, 0x50, 0x68, 0x7d, 0x53, 0x71, 0x42, 0x29, 0x32, 0x73, 0x75, 0x65,
//      0x7d, 0x5c, 0x49, 0x6f, 0x54, 0x6f, 0x71, 0x6d, 0x42, 0x54, 0x4b, 0x40,
//      0x5e, 0x46, 0x6d, 0x57, 0x55, 0x65, 0x46, 0x42, 0x48, 0x7d, 0x70, 0x32,
//      0x43, 0x48, 0x32, 0x53, 0x3c, 0x34, 0x49, 0x5c, 0x49, 0x3c, 0x61, 0x47,
//      0x3d, 0x73, 0x71, 0x6f, 0x71, 0x31, 0x43, 0x29, 0x6a, 0x72, 0x55, 0x51,
//      0x46, 0x54, 0x49, 0x71, 0x31, 0x5b, 0x70, 0x5c, 0x3d, 0x32, 0x3c, 0x32,
//      0x6c, 0x32, 0x4f, 0x46, 0x41, 0x35, 0x68, 0x70, 0x5b, 0x34, 0x31, 0x6f,
//      0x6d, 0x34, 0x66, 0x77, 0x6d, 0x75, 0x61, 0x5b, 0x53, 0x3d, 0x49, 0x42,
//      0x76, 0x50, 0x6d, 0x63, 0x41, 0x33, 0x74, 0x7e, 0x70, 0x34, 0x54, 0x48,
//      0x6d, 0x43, 0x6f, 0x51, 0x55, 0x71, 0x45, 0x3d, 0x5e, 0x47, 0x71, 0x4f,
//      0x75, 0x53, 0x61, 0x7d, 0x76, 0x30, 0x43, 0x47, 0x7e, 0x53, 0x49, 0x40,
//      0x50, 0x34, 0x62, 0x43, 0x6d, 0x7e, 0x6b, 0x74, 0x3d, 0x49, 0x52, 0x32,
//      0x53, 0x77, 0x51, 0x73, 0x36, 0x29, 0x30, 0x54, 0x45, 0x60, 0x29, 0x6a,
//      0x4c, 0x40, 0x6b, 0x43, 0x6f, 0x4f, 0x43, 0x71, 0x4f, 0x48, 0x6a, 0x49,
//      0x71, 0x62, 0x40, 0x65, 0x48, 0x60, 0x6d, 0x3c, 0x6e, 0x36, 0x5c, 0x31,
//      0x5b, 0x4c, 0x35, 0x5c, 0x49, 0x42, 0x40, 0x73, 0x6b, 0x32, 0x49, 0x4a,
//      0x4b, 0x40, 0x67, 0x77, 0x6a, 0x60, 0x37, 0x47, 0x46, 0x29, 0x41, 0x6f,
//      0x5d, 0x5b, 0x5e, 0x71, 0x57, 0x52, 0x6a, 0x71, 0x5d, 0x6d, 0x76, 0x41,
//      0x5e, 0x4e, 0x34, 0x6d, 0x60, 0x6a, 0x49, 0x34, 0x53, 0x60, 0x34, 0x48,
//      0x76, 0x62, 0x32, 0x6f, 0x5b, 0x71, 0x62, 0x40, 0x30, 0x35, 0x60, 0x31,
//      0x42, 0x36, 0x31, 0x71, 0x49, 0x5b, 0x3c, 0x5b, 0x57, 0x52, 0x3c, 0x33,
//      0x51, 0x71, 0x73, 0x5b, 0x6e, 0x36, 0x34, 0x5c, 0x46, 0x66, 0x68, 0x71,
//      0x49, 0x49, 0x4c, 0x71, 0x55, 0x49, 0x49, 0x65, 0x6a, 0x34, 0x43, 0x34,
//      0x32, 0x5d, 0x7d, 0x29, 0x49, 0x48, 0x3d, 0x55, 0x47, 0x42, 0x65, 0x53,
//      0x31, 0x65, 0x3d, 0x3c, 0x37, 0x76, 0x45, 0x3c, 0x61, 0x5e, 0x7e, 0x53,
//      0x60, 0x4b, 0x57, 0x40, 0x49, 0x48, 0x68, 0x47, 0x31, 0x67, 0x61, 0x5e,
//      0x52, 0x7d, 0x62, 0x40, 0x73, 0x30, 0x5c, 0x6d, 0x43, 0x32, 0x77, 0x76,
//      0x65, 0x3c, 0x33, 0x53, 0x55, 0x47, 0x6b, 0x70, 0x4c, 0x36, 0x6d, 0x6f,
//      0x65, 0x76, 0x60, 0x70, 0x49, 0x30, 0x7d, 0x71, 0x76, 0x49, 0x5d, 0x77,
//      0x6f, 0x63, 0x3d, 0x4a, 0x3c, 0x31, 0x45, 0x43, 0x36, 0x70, 0x6b, 0x52,
//      0x65, 0x4c, 0x4a, 0x7d, 0x67, 0x76, 0x54, 0x66, 0x76, 0x67, 0x60, 0x3c,
//      0x46, 0x71, 0x29, 0x43, 0x71, 0x56, 0x40, 0x76, 0x3c, 0x5b, 0x47, 0x55,
//      0x65, 0x49, 0x37, 0x45, 0x40, 0x32, 0x43, 0x29, 0x50, 0x31, 0x74, 0x43,
//      0x43, 0x75, 0x48, 0x70, 0x75, 0x4c, 0x66, 0x6b, 0x73, 0x32, 0x6e, 0x31,
//      0x6f, 0x76, 0x34, 0x7e, 0x29, 0x40, 0x75, 0x61, 0x7e, 0x3c, 0x71, 0x5c,
//      0x41, 0x52, 0x32, 0x5c, 0x52, 0x65, 0x4c, 0x4b, 0x31, 0x47, 0x3d, 0x5d,
//      0x75, 0x60, 0x5d, 0x3c, 0x76, 0x3d, 0x55, 0x31, 0x5b, 0x52, 0x76, 0x36,
//      0x52, 0x30, 0x73, 0x75, 0x6b, 0x37, 0x46, 0x42, 0x32, 0x40, 0x65, 0x32,
//      0x70, 0x66, 0x76, 0x49, 0x60, 0x47, 0x53, 0x76, 0x5d, 0x71, 0x30, 0x6b,
//      0x6b, 0x5d, 0x42, 0x48, 0x62, 0x34, 0x6d, 0x29, 0x30, 0x40, 0x31, 0x45,
//      0x5b, 0x40, 0x3d, 0x6f, 0x49, 0x43, 0x7d, 0x74, 0x57, 0x43, 0x3d, 0x4c,
//      0x53, 0x7d, 0x31, 0x34, 0x6a, 0x75, 0x5c, 0x4f, 0x3c, 0x63, 0x62, 0x5c,
//      0x43, 0x42, 0x31, 0x69, 0x6f, 0x31, 0x49, 0x5d, 0x4d, 0x48, 0x45, 0x6b,
//      0x30, 0x61, 0x71, 0x52, 0x3c, 0x45, 0x71, 0x37, 0x45, 0x6b, 0x4c, 0x36,
//      0x32, 0x53, 0x60, 0x31, 0x6c, 0x76, 0x62, 0x60, 0x6f, 0x75, 0x3d, 0x67,
//      0x75, 0x73, 0x43, 0x6b, 0x5c, 0x46, 0x6e, 0x6d, 0x60, 0x53, 0x5b, 0x67,
//      0x36, 0x3d, 0x63, 0x30, 0x52, 0x4d, 0x48, 0x47, 0x49, 0x48, 0x66, 0x76,
//      0x65, 0x3d, 0x43, 0x31, 0x5c, 0x4f, 0x70, 0x62, 0x74, 0x31, 0x45, 0x49,
//      0x3d, 0x34, 0x3d, 0x62, 0x34, 0x65, 0x5e, 0x60, 0x52, 0x71, 0x7d, 0x45,
//      0x71, 0x31, 0x3c, 0x30, 0x52, 0x60, 0x29, 0x43, 0x52, 0x74, 0x76, 0x5d,
//      0x34, 0x29, 0x3d, 0x6b, 0x63, 0x40, 0x54, 0x76, 0x40, 0x6d, 0x32, 0x48,
//      0x6d, 0x5c, 0x73, 0x3c, 0x5e, 0x6a, 0x32, 0x45, 0x32, 0x7d, 0x34, 0x32,
//      0x47, 0x3c, 0x76, 0x62, 0x57, 0x63, 0x29, 0x68, 0x31, 0x76, 0x43, 0x61,
//      0x52, 0x32, 0x60, 0x45, 0x3d, 0x5d, 0x4b, 0x3d, 0x63, 0x46, 0x77, 0x4d,
//      0x6b, 0x70, 0x34, 0x54, 0x62, 0x5c, 0x45, 0x5b, 0x5b, 0x5d, 0x34, 0x43,
//      0x32, 0x3d, 0x77, 0x71, 0x63, 0x32, 0x70, 0x5d, 0x60, 0x74, 0x77, 0x30,
//      0x53, 0x40, 0x65, 0x30, 0x63, 0x74, 0x6f, 0x76, 0x61, 0x6d, 0x4c, 0x7d,
//      0x76, 0x71, 0x66, 0x57, 0x7d, 0x45, 0x63, 0x4c, 0x36, 0x76, 0x6d, 0x30,
//      0x70, 0x74, 0x6f, 0x52, 0x41, 0x62, 0x6e, 0x34, 0x74, 0x34, 0x65, 0x41,
//      0x76, 0x29, 0x49, 0x6f, 0x29, 0x48, 0x5d, 0x43, 0x29, 0x65, 0x6b, 0x5d,
//      0x43, 0x41, 0x5b, 0x7d, 0x74, 0x49, 0x63, 0x65, 0x6b, 0x4f, 0x6a, 0x54,
//      0x77, 0x40, 0x63, 0x76, 0x4f, 0x7e, 0x60, 0x72, 0x33, 0x6e, 0x56, 0x76,
//      0x32, 0x29, 0x4f, 0x3c, 0x6d, 0x52, 0x61, 0x34, 0x35, 0x3d, 0x52, 0x32,
//      0x47, 0x55, 0x31, 0x67, 0x60, 0x66, 0x4d, 0x5c, 0x4f, 0x32, 0x77, 0x60,
//      0x6d, 0x49, 0x32, 0x3d, 0x5d, 0x5c, 0x43, 0x40, 0x6a, 0x7c, 0x7d, 0x63,
//      0x46, 0x6d, 0x33, 0x5c, 0x29, 0x6a, 0x62, 0x30, 0x71, 0x65, 0x71, 0x61,
//      0x50, 0x76, 0x6d, 0x71, 0x70, 0x6e, 0x32, 0x65, 0x34, 0x48, 0x76, 0x7e,
//      0x51, 0x46, 0x47, 0x7d, 0x31, 0x31, 0x43, 0x5e, 0x70, 0x71, 0x47, 0x61,
//      0x56, 0x5e, 0x31, 0x73, 0x3d, 0x6f, 0x32, 0x71, 0x63, 0x43, 0x42, 0x68,
//      0x31, 0x4f, 0x30, 0x42, 0x33, 0x71, 0x63, 0x6a, 0x71, 0x45, 0x55, 0x5d,
//      0x77, 0x6a, 0x49, 0x48, 0x31, 0x60, 0x66, 0x4c, 0x37, 0x5d, 0x32, 0x56,
//      0x5d, 0x6f, 0x76, 0x3c, 0x4c, 0x32, 0x40, 0x47, 0x49, 0x4a, 0x4a, 0x40,
//      0x32, 0x34, 0x56, 0x6e, 0x76, 0x53, 0x3d, 0x6e, 0x43, 0x34, 0x4f, 0x32,
//      0x70, 0x4a, 0x31, 0x70, 0x6f, 0x4c, 0x7d, 0x3d, 0x6d, 0x30, 0x62, 0x56,
//      0x40, 0x32, 0x71, 0x7d, 0x42, 0x60, 0x76, 0x3c, 0x62, 0x4b, 0x76, 0x63,
//      0x71, 0x65, 0x47, 0x6d, 0x67, 0x71, 0x4a, 0x60, 0x40, 0x67, 0x42, 0x56,
//      0x50, 0x6d, 0x47, 0x63, 0x70, 0x6c, 0x32, 0x62, 0x60, 0x67, 0x57, 0x31,
//      0x52, 0x32, 0x73, 0x41, 0x6b, 0x52, 0x6a, 0x73, 0x4f, 0x36, 0x29, 0x60,
//      0x6d, 0x71, 0x36, 0x74, 0x32, 0x5c, 0x62, 0x76, 0x65, 0x42, 0x54, 0x63,
//      0x6b, 0x70, 0x60, 0x42, 0x55, 0x36, 0x29, 0x29, 0x68, 0x40, 0x48, 0x32,
//      0x71, 0x74, 0x76, 0x71, 0x73, 0x34, 0x48, 0x37, 0x7d, 0x6d, 0x42, 0x5b,
//      0x6f, 0x55, 0x65, 0x60, 0x37, 0x42, 0x40, 0x32, 0x5b, 0x41, 0x31, 0x76,
//      0x51, 0x35, 0x73, 0x41, 0x60, 0x49, 0x32, 0x42, 0x36, 0x7d, 0x49, 0x71,
//      0x3c, 0x69, 0x55, 0x76, 0x6f, 0x54, 0x65, 0x32, 0x65, 0x40, 0x4f, 0x62,
//      0x6f, 0x6d, 0x6b, 0x73, 0x77, 0x32, 0x4f, 0x61, 0x5b, 0x31, 0x3d, 0x52,
//      0x75, 0x50, 0x31, 0x55, 0x70, 0x42, 0x61, 0x3c, 0x36, 0x43, 0x34, 0x52,
//      0x46, 0x31, 0x67, 0x3d, 0x43, 0x42, 0x40, 0x32, 0x32, 0x76, 0x6a, 0x40,
//      0x31, 0x42, 0x74, 0x73, 0x40, 0x47, 0x71, 0x6e, 0x6c, 0x6b, 0x43, 0x42,
//      0x33, 0x54, 0x3d, 0x73, 0x49, 0x74, 0x35, 0x32, 0x54, 0x61, 0x6a, 0x48,
//      0x60, 0x74, 0x60, 0x49, 0x33, 0x3d, 0x76, 0x46, 0x3c, 0x57, 0x57, 0x76,
//      0x70, 0x65, 0x67, 0x76, 0x6d, 0x3d, 0x37, 0x6e, 0x55, 0x5e, 0x41, 0x4a,
//      0x40, 0x6d, 0x52, 0x34, 0x31, 0x60, 0x32, 0x31, 0x3c, 0x67, 0x65, 0x71,
//      0x65, 0x6b, 0x54, 0x48, 0x36, 0x76, 0x61, 0x42, 0x60, 0x76, 0x31, 0x5b,
//      0x48, 0x29, 0x76, 0x37, 0x35, 0x54, 0x32, 0x6d, 0x5d, 0x3d, 0x50, 0x34,
//      0x5c, 0x52, 0x34, 0x31, 0x4c, 0x34, 0x6d, 0x63, 0x4f, 0x4f, 0x3d, 0x31,
//      0x42, 0x5c, 0x46, 0x71, 0x74, 0x71, 0x4b, 0x4f, 0x57, 0x6d, 0x49, 0x47,
//      0x29, 0x57, 0x5d, 0x48, 0x50, 0x74, 0x32, 0x49, 0x61, 0x70, 0x51, 0x57,
//      0x67, 0x71, 0x6f, 0x61, 0x32, 0x70, 0x49, 0x3d, 0x53, 0x37, 0x45, 0x43,
//      0x76, 0x40, 0x6d, 0x74, 0x3d, 0x56, 0x61, 0x60, 0x47, 0x49, 0x7e, 0x57,
//      0x5c, 0x52, 0x41, 0x76, 0x62, 0x6f, 0x6d, 0x43, 0x5d, 0x77, 0x31, 0x65,
//      0x40, 0x51, 0x6c, 0x57, 0x63, 0x42, 0x77, 0x54, 0x3d, 0x76, 0x32, 0x6e,
//      0x7d, 0x57, 0x5c, 0x46, 0x42, 0x68, 0x7d, 0x53, 0x5b, 0x6a, 0x71, 0x48,
//      0x63, 0x30, 0x30, 0x4d, 0x6f, 0x49, 0x42, 0x4c, 0x71, 0x40, 0x53, 0x61,
//      0x33, 0x4f, 0x48, 0x47, 0x43, 0x56, 0x53, 0x32, 0x52, 0x32, 0x36, 0x65,
//      0x36, 0x62, 0x6f, 0x53, 0x6d, 0x36, 0x52, 0x71, 0x7d, 0x36, 0x31, 0x45,
//      0x71, 0x30, 0x56, 0x6f, 0x5d, 0x42, 0x68, 0x3c, 0x40, 0x6d, 0x46, 0x74,
//      0x62, 0x40, 0x63, 0x43, 0x4a, 0x4a, 0x7d, 0x4f, 0x54, 0x68, 0x46, 0x5c,
//      0x29, 0x3d, 0x4b, 0x69, 0x76, 0x32, 0x61, 0x56, 0x6b, 0x5c, 0x52, 0x6b,
//      0x70, 0x4a, 0x6b, 0x47, 0x41, 0x29, 0x5e, 0x3d, 0x53, 0x60, 0x32, 0x42,
//      0x6b, 0x29, 0x46, 0x71, 0x52, 0x36, 0x29, 0x6a, 0x34, 0x77, 0x6f, 0x74,
//      0x34, 0x37, 0x7c, 0x3d, 0x37, 0x41, 0x51, 0x62, 0x71, 0x29, 0x60, 0x62,
//      0x54, 0x6d, 0x43, 0x34, 0x5e, 0x66, 0x31, 0x67, 0x29, 0x6e, 0x6e, 0x6f,
//      0x6d, 0x43, 0x47, 0x6c, 0x32, 0x29, 0x30, 0x37, 0x5d, 0x32, 0x47, 0x34,
//      0x74, 0x46, 0x32, 0x37, 0x46, 0x68, 0x5e, 0x71, 0x73, 0x75, 0x4c, 0x6b,
//      0x6d, 0x76, 0x3d, 0x37, 0x49, 0x57, 0x29, 0x32, 0x74, 0x62, 0x32, 0x73,
//      0x43, 0x48, 0x6d, 0x6f, 0x45, 0x43, 0x73, 0x68, 0x57, 0x72, 0x61, 0x3d,
//      0x54, 0x5c, 0x6d, 0x46, 0x6a, 0x46, 0x36, 0x32, 0x5b, 0x4b, 0x42, 0x55,
//      0x62, 0x32, 0x71, 0x32, 0x76, 0x6d, 0x6b, 0x30, 0x29, 0x34, 0x76, 0x32,
//      0x40, 0x7c, 0x6d, 0x29, 0x34, 0x77, 0x57, 0x60, 0x52, 0x77, 0x70, 0x50,
//      0x31, 0x74, 0x5b, 0x4a, 0x29, 0x48, 0x76, 0x34, 0x66, 0x55, 0x60, 0x47,
//      0x60, 0x4c, 0x52, 0x31, 0x47, 0x42, 0x4f, 0x65, 0x60, 0x76, 0x35, 0x6a,
//      0x63, 0x32, 0x5d, 0x3d, 0x5c, 0x45, 0x31, 0x31, 0x49, 0x63, 0x6f, 0x36,
//      0x67, 0x32, 0x5c, 0x63, 0x71, 0x45, 0x5b, 0x42, 0x30, 0x6b, 0x5d, 0x42,
//      0x68, 0x63, 0x48, 0x53, 0x3c, 0x77, 0x73, 0x6f, 0x45, 0x72, 0x54, 0x51,
//      0x40, 0x70, 0x5b, 0x71, 0x74, 0x32, 0x76, 0x71, 0x29, 0x35, 0x37, 0x5d,
//      0x63, 0x53, 0x7c, 0x7d, 0x76, 0x32, 0x5c, 0x72, 0x57, 0x62, 0x6f, 0x53,
//      0x76, 0x31, 0x63, 0x42, 0x3c, 0x48, 0x40, 0x73, 0x3c, 0x6d, 0x55, 0x7d,
//      0x70, 0x76, 0x4f, 0x5d, 0x36, 0x6d, 0x6a, 0x61, 0x29, 0x40, 0x45, 0x60,
//      0x6d, 0x75, 0x60, 0x65, 0x77, 0x53, 0x57, 0x71, 0x45, 0x43, 0x50, 0x30,
//      0x3d, 0x4f, 0x46, 0x47, 0x37, 0x6f, 0x31, 0x71, 0x56, 0x4d, 0x5c, 0x63,
//      0x49, 0x32, 0x7c, 0x7e, 0x53, 0x3c, 0x5b, 0x5c, 0x55, 0x65, 0x60, 0x5b,
//      0x5b, 0x48, 0x6d, 0x41, 0x3c, 0x36, 0x57, 0x31, 0x42, 0x50, 0x5c, 0x48,
//      0x65, 0x6f, 0x73, 0x60, 0x76, 0x67, 0x42, 0x67, 0x46, 0x36, 0x6d, 0x41,
//      0x36, 0x4f, 0x40, 0x49, 0x76, 0x65, 0x7d, 0x71, 0x31, 0x63, 0x68, 0x5c,
//      0x6d, 0x31, 0x6f, 0x30, 0x6f, 0x32, 0x76, 0x77, 0x6a, 0x50, 0x7e, 0x65,
//      0x63, 0x54, 0x40, 0x34, 0x32, 0x40, 0x65, 0x62, 0x3d, 0x29, 0x60, 0x3d,
//      0x3d, 0x5c, 0x63, 0x49, 0x4e, 0x70, 0x60, 0x5c, 0x41, 0x48, 0x32, 0x71,
//      0x47, 0x41, 0x42, 0x45, 0x6b, 0x53, 0x49, 0x40, 0x50, 0x6b, 0x76, 0x34,
//      0x41, 0x61, 0x31, 0x5c, 0x41, 0x4c, 0x49, 0x48, 0x51, 0x41, 0x52, 0x62,
//      0x7d, 0x52, 0x32, 0x76, 0x7c, 0x6f, 0x4f, 0x61, 0x31, 0x63, 0x32, 0x65,
//      0x30, 0x45, 0x56, 0x6b, 0x45, 0x32, 0x5e, 0x6c, 0x60, 0x74, 0x49, 0x41,
//      0x32, 0x6f, 0x74, 0x33, 0x50, 0x4a, 0x34, 0x73, 0x3c, 0x73, 0x50, 0x6d,
//      0x32, 0x42, 0x6a, 0x31, 0x57, 0x29, 0x49, 0x70, 0x72, 0x71, 0x75, 0x61,
//      0x6d, 0x4f, 0x6d, 0x74, 0x42, 0x76, 0x61, 0x6d, 0x74, 0x42, 0x29, 0x7d,
//      0x5c, 0x29, 0x49, 0x6a, 0x65, 0x76, 0x52, 0x43, 0x5c, 0x66, 0x55, 0x6d,
//      0x30, 0x6d, 0x46, 0x48, 0x63, 0x30, 0x63, 0x4e, 0x6f, 0x31, 0x49, 0x54,
//      0x34, 0x34, 0x73, 0x3c, 0x7d, 0x69, 0x76, 0x4f, 0x42, 0x6a, 0x50, 0x34,
//      0x45, 0x71, 0x65, 0x4a, 0x7e, 0x65, 0x63, 0x4c, 0x53, 0x6f, 0x6d, 0x34,
//      0x68, 0x4d, 0x34, 0x32, 0x3d, 0x53, 0x5b, 0x34, 0x29, 0x63, 0x73, 0x53,
//      0x71, 0x6d, 0x42, 0x5c, 0x6d, 0x71, 0x52, 0x3c, 0x4f, 0x41, 0x6f, 0x53,
//      0x3d, 0x6a, 0x45, 0x36, 0x29, 0x3c, 0x65, 0x6d, 0x36, 0x74, 0x3d, 0x50,
//      0x4e, 0x57, 0x52, 0x42, 0x61, 0x43, 0x6f, 0x67, 0x49, 0x4b, 0x51, 0x37,
//      0x45, 0x49, 0x41, 0x6c, 0x48, 0x53, 0x3c, 0x52, 0x4d, 0x48, 0x65, 0x42,
//      0x33, 0x46, 0x7d, 0x29, 0x71, 0x61, 0x75, 0x6f, 0x62, 0x32, 0x41, 0x67,
//      0x7d, 0x70, 0x49, 0x6a, 0x35, 0x7d, 0x47, 0x32, 0x37, 0x47, 0x68, 0x70,
//      0x5b, 0x6e, 0x55, 0x40, 0x4f, 0x60, 0x34, 0x57, 0x71, 0x76, 0x29, 0x4f,
//      0x7e, 0x40, 0x45, 0x60, 0x34, 0x6e, 0x40, 0x31, 0x49, 0x43, 0x32, 0x71,
//      0x32, 0x71, 0x5c, 0x54, 0x34, 0x70, 0x63, 0x51, 0x6f, 0x3d, 0x62, 0x29,
//      0x30, 0x31, 0x40, 0x67, 0x32, 0x33, 0x7e, 0x34, 0x52, 0x71, 0x5b, 0x45,
//      0x6b, 0x47, 0x41, 0x67, 0x32, 0x55, 0x76, 0x6b, 0x73, 0x4d, 0x3d, 0x76,
//      0x30, 0x65, 0x72, 0x40, 0x70, 0x3d, 0x76, 0x70, 0x7d, 0x29, 0x75, 0x68,
//      0x62, 0x57, 0x49, 0x71, 0x66, 0x53, 0x48, 0x70, 0x43, 0x74, 0x4e, 0x3d,
//      0x70, 0x60, 0x7d, 0x74, 0x6d, 0x6d, 0x75, 0x30, 0x46, 0x7e, 0x65, 0x6a,
//      0x29, 0x4a, 0x34, 0x43, 0x71, 0x6f, 0x76, 0x55, 0x4f, 0x49, 0x7e, 0x6e,
//      0x76, 0x29, 0x42, 0x51, 0x65, 0x32, 0x45, 0x72, 0x4f, 0x42, 0x55, 0x6d,
//      0x42, 0x65, 0x63, 0x76, 0x73, 0x6b, 0x50, 0x6e, 0x5c, 0x29, 0x61, 0x4e,
//      0x35, 0x6f, 0x4f, 0x76, 0x53, 0x55, 0x60, 0x53, 0x72, 0x4c, 0x46, 0x71,
//      0x4f, 0x60, 0x30, 0x4e, 0x31, 0x70, 0x60, 0x45, 0x71, 0x40, 0x47, 0x3c,
//      0x61, 0x42, 0x48, 0x31, 0x71, 0x49, 0x6c, 0x55, 0x45, 0x3c, 0x33, 0x32,
//      0x71, 0x29, 0x34, 0x6e, 0x54, 0x55, 0x32, 0x33, 0x53, 0x6e, 0x36, 0x40,
//      0x61, 0x61, 0x66, 0x48, 0x6d, 0x42, 0x76, 0x51, 0x3d, 0x31, 0x42, 0x6e,
//      0x30, 0x71, 0x63, 0x32, 0x5e, 0x7e, 0x3d, 0x63, 0x66, 0x70, 0x76, 0x57,
//      0x47, 0x61, 0x7e, 0x56, 0x71, 0x73, 0x43, 0x6f, 0x37, 0x60, 0x67, 0x43,
//      0x4c, 0x3c, 0x6b, 0x52, 0x49, 0x4f, 0x73, 0x31, 0x43, 0x34, 0x61, 0x5b,
//      0x76, 0x31, 0x3d, 0x7d, 0x70, 0x32, 0x70, 0x29, 0x65, 0x3d, 0x3d, 0x73,
//      0x49, 0x65, 0x7d, 0x55, 0x31, 0x3c, 0x77, 0x54, 0x48, 0x53, 0x42, 0x3c,
//      0x32, 0x7e, 0x65, 0x71, 0x68, 0x34, 0x3d, 0x73, 0x43, 0x33, 0x68, 0x6f,
//      0x29, 0x29, 0x6e, 0x47, 0x60, 0x32, 0x40, 0x54, 0x73, 0x55, 0x52, 0x63,
//      0x65, 0x5b, 0x3d, 0x52, 0x71, 0x48, 0x49, 0x55, 0x4f, 0x70, 0x45, 0x34,
//      0x37, 0x5d, 0x60, 0x40, 0x33, 0x36, 0x76, 0x43, 0x49, 0x37, 0x31, 0x73,
//      0x5b, 0x62, 0x7e, 0x34, 0x70, 0x49, 0x43, 0x30, 0x40, 0x31, 0x49, 0x67,
//      0x5c, 0x40, 0x49, 0x34, 0x37, 0x7e, 0x76, 0x6d, 0x70, 0x52, 0x67, 0x7d,
//      0x43, 0x3d, 0x49, 0x7c, 0x60, 0x65, 0x4c, 0x70, 0x75, 0x71, 0x47, 0x70,
//      0x3c, 0x4c, 0x6f, 0x5e, 0x46, 0x49, 0x77, 0x7d, 0x4f, 0x42, 0x4c, 0x7c,
//      0x57, 0x29, 0x61, 0x5d, 0x43, 0x3d, 0x43, 0x32, 0x6d, 0x56, 0x55, 0x74,
//      0x3d, 0x76, 0x55, 0x57, 0x47, 0x34, 0x77, 0x42, 0x6d, 0x52, 0x6f, 0x4f,
//      0x4e, 0x71, 0x5d, 0x3c, 0x52, 0x41, 0x6b, 0x70, 0x43, 0x4b, 0x42, 0x3d,
//      0x76, 0x32, 0x30, 0x69, 0x34, 0x63, 0x4c, 0x6e, 0x30, 0x6f, 0x63, 0x33,
//      0x68, 0x3d, 0x5c, 0x52, 0x41, 0x37, 0x61, 0x71, 0x29, 0x43, 0x49, 0x3d,
//      0x7d, 0x62, 0x48, 0x53, 0x73, 0x55, 0x4f, 0x32, 0x4a, 0x5d, 0x48, 0x70,
//      0x43, 0x53, 0x35, 0x32, 0x6d, 0x3c, 0x5e, 0x49, 0x5c, 0x6d, 0x3d, 0x76,
//      0x30, 0x32, 0x4f, 0x70, 0x3d, 0x32, 0x3d, 0x6d, 0x34, 0x3c, 0x54, 0x57,
//      0x62, 0x60, 0x6e, 0x37, 0x3d, 0x5d, 0x6f, 0x70, 0x6a, 0x3d, 0x73, 0x42,
//      0x56, 0x61, 0x71, 0x4f, 0x71, 0x43, 0x6b, 0x7e, 0x4f, 0x71, 0x54, 0x7d,
//      0x76, 0x49, 0x43, 0x29, 0x5e, 0x57, 0x52, 0x49, 0x37, 0x36, 0x5c, 0x52,
//      0x46, 0x31, 0x6e, 0x68, 0x4f, 0x3c, 0x5b, 0x51, 0x3d, 0x6d, 0x70, 0x62,
//      0x33, 0x6b, 0x76, 0x60, 0x6d, 0x34, 0x6b, 0x45, 0x49, 0x7e, 0x7e, 0x40,
//      0x40, 0x61, 0x37, 0x45, 0x32, 0x63, 0x3c, 0x41, 0x63, 0x71, 0x6d, 0x6a,
//      0x29, 0x48, 0x48, 0x4f, 0x29, 0x65, 0x5c, 0x36, 0x67, 0x60, 0x41, 0x73,
//      0x6d, 0x6d, 0x3c, 0x34, 0x5c, 0x32, 0x32, 0x42, 0x4c, 0x65, 0x36, 0x32,
//      0x34, 0x7e, 0x62, 0x5c, 0x73, 0x71, 0x62, 0x60, 0x5c, 0x62, 0x5b, 0x76,
//      0x4d, 0x76, 0x70, 0x71, 0x45, 0x37, 0x31, 0x65, 0x61, 0x41, 0x63, 0x7e,
//      0x51, 0x41, 0x4c, 0x56, 0x55, 0x63, 0x32, 0x77, 0x4d, 0x71, 0x76, 0x66,
//      0x54, 0x66, 0x32, 0x43, 0x77, 0x54, 0x6a, 0x76, 0x37, 0x46, 0x45, 0x36,
//      0x7d, 0x63, 0x77, 0x30, 0x46, 0x32, 0x47, 0x71, 0x53, 0x6e, 0x4a, 0x40,
//      0x33, 0x41, 0x63, 0x7e, 0x5c, 0x65, 0x41, 0x4e, 0x7e, 0x76, 0x32, 0x36,
//      0x6e, 0x71, 0x37, 0x5b, 0x5c, 0x7d, 0x76, 0x65, 0x29, 0x75, 0x53, 0x76,
//      0x43, 0x3c, 0x3c, 0x49, 0x32, 0x63, 0x43, 0x76, 0x31, 0x71, 0x5c, 0x5b,
//      0x7e, 0x5b, 0x71, 0x32, 0x63, 0x41, 0x33, 0x7e, 0x5c, 0x65, 0x41, 0x77,
//      0x7e, 0x40, 0x33, 0x2e,
//  };
//
//  std::string csResult = "";
//  if (mode == _SSLCERT_SHA2)
//    csResult = DecodeCertBuffer(key_buffer2, sizeof(key_buffer2));
//  else
//    csResult = DecodeCertBuffer(key_buffer1, sizeof(key_buffer1));
//
//  return csResult;
//}
//
//
//std::string GetCertBuffer(int mode) {
//  const char cert_buffer1[] = {0x00};  // sha1
//
//  const char cert_buffer2[] = {
//      // sha256
//      0x75, 0x7e, 0x5c, 0x65, 0x41, 0x5d, 0x7e, 0x5c, 0x70, 0x37, 0x36, 0x71,
//      0x76, 0x60, 0x3c, 0x3c, 0x31, 0x5e, 0x5b, 0x62, 0x32, 0x71, 0x32, 0x3c,
//      0x76, 0x67, 0x5c, 0x76, 0x34, 0x3c, 0x6a, 0x40, 0x65, 0x43, 0x76, 0x5c,
//      0x71, 0x5c, 0x65, 0x41, 0x63, 0x7e, 0x5c, 0x65, 0x41, 0x48, 0x37, 0x63,
//      0x70, 0x3c, 0x5c, 0x5c, 0x76, 0x71, 0x3d, 0x72, 0x7d, 0x63, 0x3d, 0x62,
//      0x36, 0x40, 0x6d, 0x42, 0x6a, 0x60, 0x34, 0x65, 0x43, 0x53, 0x30, 0x5c,
//      0x76, 0x3c, 0x5b, 0x41, 0x34, 0x65, 0x49, 0x68, 0x41, 0x40, 0x76, 0x49,
//      0x30, 0x6a, 0x76, 0x67, 0x76, 0x50, 0x43, 0x6b, 0x43, 0x61, 0x48, 0x76,
//      0x31, 0x6d, 0x49, 0x31, 0x4b, 0x31, 0x76, 0x29, 0x54, 0x4a, 0x71, 0x65,
//      0x3d, 0x31, 0x32, 0x6b, 0x76, 0x60, 0x31, 0x4f, 0x5c, 0x6d, 0x77, 0x73,
//      0x60, 0x71, 0x43, 0x43, 0x43, 0x61, 0x40, 0x63, 0x3d, 0x53, 0x49, 0x32,
//      0x76, 0x43, 0x3d, 0x29, 0x40, 0x49, 0x49, 0x4c, 0x7c, 0x71, 0x63, 0x71,
//      0x5b, 0x6d, 0x76, 0x65, 0x3c, 0x45, 0x57, 0x31, 0x49, 0x48, 0x68, 0x57,
//      0x40, 0x63, 0x43, 0x50, 0x65, 0x31, 0x76, 0x6f, 0x6a, 0x68, 0x31, 0x47,
//      0x42, 0x71, 0x6c, 0x32, 0x49, 0x3c, 0x4a, 0x43, 0x6d, 0x49, 0x42, 0x5c,
//      0x53, 0x6b, 0x52, 0x32, 0x41, 0x73, 0x32, 0x45, 0x32, 0x3d, 0x66, 0x40,
//      0x5d, 0x71, 0x48, 0x34, 0x71, 0x43, 0x71, 0x43, 0x5c, 0x6f, 0x65, 0x70,
//      0x29, 0x71, 0x48, 0x53, 0x60, 0x36, 0x35, 0x7d, 0x63, 0x29, 0x6a, 0x40,
//      0x31, 0x32, 0x71, 0x5d, 0x6a, 0x60, 0x65, 0x46, 0x52, 0x66, 0x55, 0x70,
//      0x42, 0x29, 0x52, 0x32, 0x29, 0x63, 0x73, 0x74, 0x31, 0x76, 0x71, 0x5d,
//      0x7e, 0x60, 0x65, 0x30, 0x29, 0x56, 0x40, 0x31, 0x43, 0x3d, 0x69, 0x32,
//      0x52, 0x3d, 0x53, 0x31, 0x31, 0x65, 0x34, 0x50, 0x3d, 0x60, 0x54, 0x61,
//      0x3c, 0x62, 0x57, 0x63, 0x32, 0x31, 0x72, 0x31, 0x76, 0x3c, 0x5b, 0x62,
//      0x71, 0x65, 0x29, 0x6a, 0x6e, 0x32, 0x76, 0x32, 0x62, 0x65, 0x34, 0x53,
//      0x60, 0x68, 0x68, 0x32, 0x31, 0x3c, 0x52, 0x29, 0x40, 0x49, 0x34, 0x43,
//      0x7d, 0x57, 0x74, 0x34, 0x34, 0x6f, 0x6f, 0x63, 0x34, 0x73, 0x4b, 0x31,
//      0x32, 0x29, 0x54, 0x57, 0x60, 0x65, 0x3d, 0x53, 0x48, 0x6d, 0x76, 0x71,
//      0x6d, 0x48, 0x76, 0x32, 0x43, 0x29, 0x49, 0x71, 0x29, 0x43, 0x5c, 0x47,
//      0x32, 0x43, 0x49, 0x32, 0x71, 0x71, 0x49, 0x32, 0x3d, 0x72, 0x5c, 0x76,
//      0x49, 0x37, 0x49, 0x5c, 0x6d, 0x61, 0x5b, 0x5c, 0x31, 0x63, 0x3c, 0x45,
//      0x6c, 0x7d, 0x53, 0x43, 0x33, 0x35, 0x7d, 0x4f, 0x49, 0x74, 0x31, 0x37,
//      0x5d, 0x49, 0x53, 0x77, 0x6f, 0x29, 0x3c, 0x5b, 0x53, 0x76, 0x76, 0x32,
//      0x52, 0x50, 0x40, 0x76, 0x43, 0x4a, 0x74, 0x40, 0x65, 0x43, 0x71, 0x48,
//      0x36, 0x29, 0x43, 0x3d, 0x55, 0x5c, 0x76, 0x49, 0x37, 0x47, 0x40, 0x4f,
//      0x60, 0x7e, 0x61, 0x40, 0x65, 0x43, 0x71, 0x47, 0x71, 0x76, 0x29, 0x65,
//      0x50, 0x6f, 0x74, 0x77, 0x65, 0x7e, 0x31, 0x73, 0x3d, 0x56, 0x52, 0x7d,
//      0x62, 0x32, 0x29, 0x73, 0x60, 0x6d, 0x49, 0x6a, 0x45, 0x76, 0x6d, 0x46,
//      0x65, 0x40, 0x55, 0x74, 0x32, 0x5c, 0x43, 0x71, 0x62, 0x49, 0x7e, 0x49,
//      0x6b, 0x51, 0x46, 0x56, 0x48, 0x48, 0x47, 0x49, 0x5e, 0x36, 0x40, 0x6d,
//      0x41, 0x34, 0x35, 0x71, 0x31, 0x5b, 0x7e, 0x73, 0x5c, 0x76, 0x6f, 0x68,
//      0x4b, 0x57, 0x76, 0x60, 0x4c, 0x60, 0x31, 0x63, 0x43, 0x33, 0x41, 0x6b,
//      0x73, 0x75, 0x4c, 0x71, 0x68, 0x65, 0x60, 0x5c, 0x5d, 0x7d, 0x63, 0x49,
//      0x5e, 0x4e, 0x7d, 0x47, 0x35, 0x30, 0x49, 0x6d, 0x31, 0x29, 0x6e, 0x48,
//      0x57, 0x32, 0x29, 0x65, 0x5b, 0x71, 0x6d, 0x61, 0x34, 0x35, 0x34, 0x62,
//      0x63, 0x51, 0x31, 0x31, 0x32, 0x43, 0x6a, 0x5b, 0x31, 0x47, 0x63, 0x6a,
//      0x51, 0x40, 0x70, 0x60, 0x4f, 0x36, 0x60, 0x67, 0x3d, 0x29, 0x68, 0x40,
//      0x63, 0x54, 0x6e, 0x71, 0x55, 0x76, 0x32, 0x31, 0x6a, 0x3d, 0x47, 0x70,
//      0x37, 0x5d, 0x48, 0x6d, 0x32, 0x41, 0x3d, 0x71, 0x53, 0x43, 0x4c, 0x53,
//      0x6f, 0x74, 0x49, 0x6d, 0x37, 0x40, 0x5d, 0x49, 0x45, 0x5e, 0x3d, 0x72,
//      0x61, 0x5e, 0x57, 0x7d, 0x63, 0x30, 0x4a, 0x47, 0x32, 0x29, 0x60, 0x37,
//      0x52, 0x57, 0x74, 0x5b, 0x65, 0x30, 0x48, 0x65, 0x75, 0x54, 0x77, 0x6f,
//      0x5d, 0x48, 0x4c, 0x53, 0x5c, 0x62, 0x48, 0x30, 0x4c, 0x55, 0x43, 0x6b,
//      0x50, 0x76, 0x3d, 0x37, 0x46, 0x6e, 0x7d, 0x60, 0x52, 0x43, 0x67, 0x77,
//      0x36, 0x62, 0x71, 0x68, 0x3c, 0x76, 0x73, 0x5b, 0x43, 0x70, 0x7d, 0x74,
//      0x5b, 0x37, 0x4a, 0x7e, 0x70, 0x34, 0x50, 0x66, 0x31, 0x4f, 0x43, 0x6e,
//      0x46, 0x32, 0x76, 0x32, 0x67, 0x56, 0x6b, 0x49, 0x49, 0x68, 0x47, 0x76,
//      0x47, 0x63, 0x53, 0x45, 0x3d, 0x29, 0x6a, 0x6f, 0x50, 0x76, 0x31, 0x43,
//      0x50, 0x75, 0x7e, 0x53, 0x5b, 0x43, 0x66, 0x6f, 0x74, 0x76, 0x70, 0x31,
//      0x37, 0x49, 0x3c, 0x32, 0x29, 0x32, 0x4f, 0x46, 0x41, 0x3c, 0x68, 0x70,
//      0x5b, 0x34, 0x32, 0x6f, 0x6d, 0x34, 0x66, 0x4b, 0x6d, 0x63, 0x29, 0x4f,
//      0x75, 0x6d, 0x43, 0x71, 0x7d, 0x3d, 0x5c, 0x4f, 0x75, 0x50, 0x76, 0x32,
//      0x45, 0x5b, 0x48, 0x75, 0x76, 0x73, 0x3c, 0x52, 0x32, 0x6b, 0x4f, 0x3c,
//      0x74, 0x66, 0x7d, 0x62, 0x60, 0x61, 0x53, 0x31, 0x63, 0x76, 0x50, 0x6b,
//      0x57, 0x32, 0x5b, 0x63, 0x62, 0x6f, 0x32, 0x34, 0x54, 0x40, 0x6b, 0x4f,
//      0x32, 0x67, 0x3d, 0x6b, 0x5d, 0x77, 0x4c, 0x74, 0x31, 0x45, 0x5b, 0x65,
//      0x53, 0x31, 0x74, 0x42, 0x54, 0x75, 0x76, 0x73, 0x34, 0x74, 0x62, 0x34,
//      0x5d, 0x43, 0x29, 0x69, 0x3d, 0x62, 0x71, 0x70, 0x4d, 0x48, 0x47, 0x66,
//      0x68, 0x61, 0x5c, 0x31, 0x5b, 0x4c, 0x71, 0x5c, 0x49, 0x42, 0x40, 0x36,
//      0x6b, 0x32, 0x49, 0x4a, 0x6c, 0x40, 0x67, 0x77, 0x6a, 0x75, 0x55, 0x65,
//      0x40, 0x51, 0x43, 0x6f, 0x52, 0x3c, 0x4c, 0x6d, 0x55, 0x43, 0x43, 0x34,
//      0x36, 0x5c, 0x4f, 0x3c, 0x49, 0x4d, 0x34, 0x53, 0x43, 0x45, 0x66, 0x60,
//      0x70, 0x49, 0x40, 0x31, 0x3d, 0x76, 0x6a, 0x29, 0x74, 0x3d, 0x62, 0x49,
//      0x70, 0x34, 0x36, 0x29, 0x30, 0x52, 0x5e, 0x76, 0x29, 0x49, 0x4c, 0x45,
//      0x48, 0x47, 0x42, 0x74, 0x52, 0x6f, 0x52, 0x41, 0x49, 0x74, 0x7e, 0x4f,
//      0x6a, 0x52, 0x3d, 0x6d, 0x67, 0x42, 0x4b, 0x76, 0x6d, 0x67, 0x71, 0x63,
//      0x6d, 0x32, 0x49, 0x32, 0x33, 0x6a, 0x5c, 0x32, 0x42, 0x4b, 0x34, 0x7d,
//      0x72, 0x61, 0x65, 0x62, 0x31, 0x65, 0x3d, 0x3c, 0x31, 0x76, 0x45, 0x3c,
//      0x61, 0x32, 0x7e, 0x53, 0x60, 0x4b, 0x4b, 0x40, 0x49, 0x34, 0x3d, 0x4d,
//      0x57, 0x47, 0x3c, 0x33, 0x62, 0x3d, 0x62, 0x3d, 0x3c, 0x5d, 0x48, 0x32,
//      0x32, 0x31, 0x77, 0x40, 0x47, 0x42, 0x4b, 0x5d, 0x34, 0x73, 0x76, 0x30,
//      0x53, 0x48, 0x73, 0x71, 0x53, 0x74, 0x6d, 0x67, 0x49, 0x43, 0x4c, 0x5c,
//      0x6d, 0x6f, 0x51, 0x57, 0x40, 0x65, 0x46, 0x36, 0x36, 0x6b, 0x76, 0x30,
//      0x54, 0x74, 0x55, 0x31, 0x42, 0x61, 0x6e, 0x60, 0x31, 0x5b, 0x71, 0x41,
//      0x60, 0x65, 0x49, 0x29, 0x29, 0x40, 0x32, 0x43, 0x5b, 0x65, 0x40, 0x47,
//      0x35, 0x73, 0x5b, 0x6d, 0x67, 0x60, 0x63, 0x65, 0x71, 0x29, 0x43, 0x63,
//      0x77, 0x37, 0x63, 0x3c, 0x45, 0x7e, 0x31, 0x49, 0x34, 0x77, 0x56, 0x76,
//      0x31, 0x71, 0x43, 0x3c, 0x71, 0x47, 0x60, 0x71, 0x35, 0x32, 0x31, 0x43,
//      0x34, 0x55, 0x31, 0x32, 0x3c, 0x5b, 0x4d, 0x6f, 0x37, 0x46, 0x41, 0x60,
//      0x71, 0x65, 0x32, 0x30, 0x5d, 0x7d, 0x53, 0x3c, 0x29, 0x7c, 0x71, 0x43,
//      0x6f, 0x50, 0x33, 0x3d, 0x45, 0x3d, 0x76, 0x30, 0x60, 0x32, 0x34, 0x4e,
//      0x50, 0x3d, 0x45, 0x72, 0x50, 0x6e, 0x6d, 0x67, 0x60, 0x77, 0x76, 0x60,
//      0x70, 0x49, 0x29, 0x7d, 0x32, 0x49, 0x77, 0x54, 0x70, 0x7d, 0x63, 0x3c,
//      0x37, 0x5e, 0x34, 0x53, 0x60, 0x52, 0x32, 0x55, 0x65, 0x43, 0x32, 0x68,
//      0x3d, 0x65, 0x40, 0x50, 0x33, 0x40, 0x76, 0x3d, 0x65, 0x45, 0x6b, 0x52,
//      0x6f, 0x68, 0x49, 0x76, 0x5c, 0x46, 0x45, 0x4c, 0x40, 0x32, 0x49, 0x6f,
//      0x5d, 0x55, 0x32, 0x34, 0x4f, 0x32, 0x76, 0x76, 0x6b, 0x6e, 0x4a, 0x55,
//      0x4f, 0x46, 0x6e, 0x6e, 0x76, 0x67, 0x49, 0x4b, 0x43, 0x48, 0x53, 0x60,
//      0x62, 0x4a, 0x76, 0x32, 0x49, 0x29, 0x7d, 0x32, 0x49, 0x77, 0x54, 0x56,
//      0x32, 0x29, 0x3c, 0x5b, 0x42, 0x5c, 0x67, 0x60, 0x5b, 0x4b, 0x71, 0x29,
//      0x43, 0x6f, 0x47, 0x40, 0x47, 0x60, 0x36, 0x60, 0x32, 0x63, 0x42, 0x71,
//      0x50, 0x36, 0x29, 0x32, 0x37, 0x6c, 0x40, 0x76, 0x70, 0x62, 0x57, 0x40,
//      0x47, 0x32, 0x5b, 0x41, 0x60, 0x65, 0x60, 0x45, 0x4f, 0x6d, 0x76, 0x71,
//      0x6d, 0x71, 0x76, 0x5d, 0x5b, 0x5c, 0x62, 0x40, 0x63, 0x3c, 0x3d, 0x63,
//      0x60, 0x54, 0x61, 0x43, 0x55, 0x6d, 0x6d, 0x3d, 0x43, 0x40, 0x34, 0x45,
//      0x60, 0x5b, 0x76, 0x40, 0x76, 0x43, 0x34, 0x37, 0x5c, 0x76, 0x61, 0x3d,
//      0x6f, 0x32, 0x29, 0x63, 0x73, 0x42, 0x31, 0x52, 0x61, 0x5b, 0x31, 0x60,
//      0x76, 0x70, 0x62, 0x41, 0x3d, 0x74, 0x42, 0x3d, 0x36, 0x40, 0x31, 0x5b,
//      0x74, 0x69, 0x40, 0x70, 0x3d, 0x6a, 0x65, 0x71, 0x70, 0x3d, 0x3c, 0x62,
//      0x48, 0x5d, 0x3d, 0x29, 0x77, 0x76, 0x76, 0x32, 0x37, 0x31, 0x40, 0x53,
//      0x60, 0x32, 0x31, 0x40, 0x76, 0x29, 0x65, 0x3c, 0x5c, 0x76, 0x3c, 0x5b,
//      0x46, 0x76, 0x76, 0x43, 0x73, 0x42, 0x55, 0x4f, 0x60, 0x68, 0x6a, 0x5c,
//      0x4f, 0x60, 0x37, 0x73, 0x55, 0x47, 0x32, 0x51, 0x6c, 0x6b, 0x70, 0x76,
//      0x53, 0x54, 0x37, 0x47, 0x61, 0x66, 0x35, 0x68, 0x4f, 0x49, 0x33, 0x48,
//      0x71, 0x76, 0x46, 0x49, 0x33, 0x55, 0x47, 0x30, 0x37, 0x57, 0x36, 0x43,
//      0x49, 0x74, 0x67, 0x68, 0x53, 0x63, 0x4c, 0x6e, 0x55, 0x45, 0x71, 0x34,
//      0x40, 0x7d, 0x43, 0x71, 0x62, 0x60, 0x55, 0x6d, 0x40, 0x6a, 0x65, 0x55,
//      0x70, 0x71, 0x65, 0x48, 0x3d, 0x52, 0x54, 0x30, 0x60, 0x6b, 0x74, 0x71,
//      0x71, 0x29, 0x36, 0x43, 0x60, 0x7e, 0x32, 0x6b, 0x49, 0x34, 0x77, 0x34,
//      0x6d, 0x47, 0x30, 0x37, 0x4c, 0x40, 0x45, 0x71, 0x42, 0x4f, 0x6f, 0x31,
//      0x43, 0x6e, 0x46, 0x48, 0x4f, 0x70, 0x30, 0x4f, 0x48, 0x47, 0x29, 0x51,
//      0x29, 0x48, 0x73, 0x3c, 0x42, 0x74, 0x31, 0x45, 0x61, 0x43, 0x51, 0x71,
//      0x5d, 0x72, 0x68, 0x61, 0x32, 0x67, 0x75, 0x51, 0x53, 0x32, 0x32, 0x3c,
//      0x4c, 0x40, 0x55, 0x73, 0x32, 0x30, 0x61, 0x34, 0x49, 0x43, 0x74, 0x57,
//      0x5c, 0x43, 0x42, 0x40, 0x62, 0x68, 0x65, 0x66, 0x6e, 0x77, 0x32, 0x67,
//      0x29, 0x50, 0x6c, 0x60, 0x43, 0x42, 0x7d, 0x54, 0x3d, 0x67, 0x5b, 0x65,
//      0x7d, 0x76, 0x29, 0x35, 0x6a, 0x68, 0x60, 0x65, 0x70, 0x56, 0x71, 0x71,
//      0x73, 0x29, 0x6a, 0x4d, 0x55, 0x65, 0x71, 0x3d, 0x71, 0x6f, 0x47, 0x49,
//      0x31, 0x4f, 0x7d, 0x5d, 0x63, 0x30, 0x53, 0x60, 0x6d, 0x30, 0x76, 0x65,
//      0x31, 0x70, 0x34, 0x5b, 0x6d, 0x60, 0x31, 0x29, 0x30, 0x36, 0x5c, 0x5d,
//      0x49, 0x54, 0x56, 0x5c, 0x5d, 0x6b, 0x6e, 0x3c, 0x55, 0x4f, 0x71, 0x5d,
//      0x62, 0x71, 0x54, 0x61, 0x29, 0x4a, 0x32, 0x65, 0x70, 0x53, 0x46, 0x34,
//      0x76, 0x3d, 0x43, 0x69, 0x7d, 0x73, 0x43, 0x5c, 0x6b, 0x5c, 0x53, 0x72,
//      0x54, 0x4a, 0x32, 0x74, 0x49, 0x37, 0x5e, 0x5c, 0x51, 0x46, 0x70, 0x42,
//      0x68, 0x65, 0x41, 0x47, 0x52, 0x6b, 0x32, 0x32, 0x31, 0x77, 0x6b, 0x5d,
//      0x32, 0x33, 0x7c, 0x6b, 0x74, 0x3c, 0x34, 0x62, 0x3d, 0x32, 0x3c, 0x48,
//      0x54, 0x71, 0x49, 0x3c, 0x6a, 0x66, 0x31, 0x52, 0x6a, 0x4f, 0x6e, 0x31,
//      0x5d, 0x34, 0x76, 0x6c, 0x71, 0x67, 0x34, 0x67, 0x5d, 0x76, 0x32, 0x71,
//      0x73, 0x46, 0x48, 0x63, 0x63, 0x50, 0x5e, 0x71, 0x52, 0x6b, 0x54, 0x6b,
//      0x31, 0x45, 0x40, 0x54, 0x49, 0x40, 0x76, 0x42, 0x7e, 0x62, 0x55, 0x5c,
//      0x41, 0x3c, 0x6d, 0x37, 0x47, 0x65, 0x54, 0x68, 0x6d, 0x31, 0x3c, 0x40,
//      0x54, 0x6d, 0x31, 0x75, 0x4f, 0x46, 0x57, 0x52, 0x48, 0x30, 0x42, 0x34,
//      0x65, 0x32, 0x71, 0x32, 0x6b, 0x29, 0x75, 0x54, 0x29, 0x6d, 0x29, 0x61,
//      0x43, 0x7c, 0x3d, 0x31, 0x49, 0x4c, 0x57, 0x68, 0x53, 0x63, 0x6e, 0x50,
//      0x55, 0x31, 0x49, 0x50, 0x29, 0x40, 0x53, 0x49, 0x66, 0x55, 0x6d, 0x74,
//      0x32, 0x56, 0x52, 0x40, 0x4f, 0x71, 0x4f, 0x65, 0x34, 0x5d, 0x60, 0x45,
//      0x63, 0x76, 0x65, 0x71, 0x4f, 0x45, 0x68, 0x65, 0x34, 0x66, 0x6f, 0x32,
//      0x65, 0x30, 0x32, 0x63, 0x34, 0x52, 0x34, 0x61, 0x30, 0x60, 0x73, 0x49,
//      0x68, 0x63, 0x6f, 0x70, 0x42, 0x4f, 0x73, 0x48, 0x45, 0x42, 0x45, 0x51,
//      0x48, 0x65, 0x6b, 0x68, 0x74, 0x34, 0x63, 0x35, 0x73, 0x35, 0x57, 0x29,
//      0x42, 0x33, 0x7c, 0x57, 0x49, 0x3d, 0x42, 0x72, 0x55, 0x47, 0x46, 0x36,
//      0x76, 0x31, 0x4f, 0x3c, 0x70, 0x48, 0x48, 0x67, 0x34, 0x61, 0x55, 0x7d,
//      0x32, 0x42, 0x45, 0x5d, 0x55, 0x32, 0x3c, 0x50, 0x29, 0x6d, 0x47, 0x3c,
//      0x42, 0x75, 0x48, 0x73, 0x5b, 0x34, 0x57, 0x31, 0x76, 0x65, 0x50, 0x30,
//      0x31, 0x63, 0x71, 0x51, 0x37, 0x48, 0x45, 0x49, 0x67, 0x4d, 0x7e, 0x4f,
//      0x46, 0x56, 0x7c, 0x57, 0x62, 0x77, 0x50, 0x5c, 0x55, 0x31, 0x6b, 0x53,
//      0x5b, 0x5c, 0x47, 0x43, 0x49, 0x36, 0x60, 0x31, 0x75, 0x65, 0x5c, 0x34,
//      0x4f, 0x35, 0x6a, 0x60, 0x32, 0x62, 0x71, 0x7e, 0x46, 0x32, 0x6d, 0x35,
//      0x6e, 0x4f, 0x55, 0x40, 0x33, 0x53, 0x7d, 0x48, 0x4f, 0x32, 0x40, 0x5c,
//      0x60, 0x70, 0x3d, 0x67, 0x6f, 0x6f, 0x75, 0x33, 0x41, 0x50, 0x7e, 0x5c,
//      0x65, 0x41, 0x40, 0x7e, 0x76, 0x32, 0x36, 0x62, 0x71, 0x37, 0x5b, 0x62,
//      0x3d, 0x71, 0x32, 0x3c, 0x76, 0x70, 0x5c, 0x76, 0x34, 0x3c, 0x32, 0x40,
//      0x65, 0x43, 0x76, 0x45, 0x71, 0x5c, 0x65, 0x41, 0x50, 0x7e, 0x5c, 0x65,
//      0x41, 0x61, 0x37, 0x75, 0x2e, 0x2e,
//  };
//
//  std::string csResult = "";
//  if (mode == _SSLCERT_SHA2)
//    csResult = DecodeCertBuffer(cert_buffer2, sizeof(cert_buffer2));
//  else
//    csResult = DecodeCertBuffer(cert_buffer1, sizeof(cert_buffer1));
//
//  return csResult;
//}
//
//SSL_CTX* getServerCTX() {
//  const SSL_METHOD* method;
//  method = SSLv23_client_method();
//  printf(("[getServerCTX] SSLv23_method(method=0x%08X)\n"), method);
//
//  SSL_CTX* ctx = SSL_CTX_new((SSL_METHOD*)method);
//  if (ctx == NULL) {
//    printf(("[getServerCTX] SSL_CTX_new failed\n"));
//    return NULL;
//  }
//
//  SSL_CTX_set_timeout(ctx, 5);  // timeout 5 seconds
//
//  return ctx;
//}
//
//
//static bool loadCertificates(SSL_CTX* ctx, int mode) {
//  bool bResult = false;
//
//  int rtn = -1, length = 0;
//
//  BIO *bio_cert = NULL, *bio_key = NULL;
//  X509* cert = NULL;
//  RSA* rsa = NULL;
//
//  std::string csbuffer;
//  char* pbuffer = NULL;
//
//  csbuffer = GetCertBuffer(mode);
//  length = csbuffer.length();
//
//  pbuffer = (char*)malloc(length + 1);
//  memset(pbuffer, 0x00, length + 1);
//  strncpy_s(pbuffer, length + 1, csbuffer.c_str(), length);
//  // RACEA("[loadCertificates] cert_buffer length=%d\n%s\n", length, pbuffer);
//
//  bio_cert = BIO_new_mem_buf((void*)pbuffer, -1);
//  if (NULL == bio_cert) {
//    printf(("[loadCertificates] BIO_new_mem_buf 'cert' failed(len=%d)"),
//                   length);
//    goto FINAL;
//  }
//
//  PEM_read_bio_X509(bio_cert, &cert, 0, NULL);
//  if (NULL == cert) {
//    printf(("[loadCertificates] PEM_read_bio_X509 failed(len=%d)"),
//                   length);
//    goto FINAL;
//  }
//
//  // set the local certificate from Memory
//  rtn = SSL_CTX_use_certificate(ctx, cert);
//  if (rtn <= 0) {
//    printf(
//        ("[loadCertificates] SSL_CTX_use_certificate failed(rtn=%d,len=%d)"),
//        rtn, length);
//    goto FINAL;
//  }
//
//  csbuffer = GetKeyBuffer(mode);
//  length = csbuffer.length();
//
//  if (pbuffer) {
//    free(pbuffer);
//    pbuffer = NULL;
//  }
//  pbuffer = (char*)malloc(length + 1);
//  memset(pbuffer, 0x00, length + 1);
//  strncpy_s(pbuffer, length + 1, csbuffer.c_str(), length);
//  // RACEA("[loadCertificates] key_buffer length=%d\n%s\n", length, pbuffer);
//
//  bio_key = BIO_new_mem_buf((void*)pbuffer, -1);
//  if (NULL == bio_key) {
//    printf(("[loadCertificates] BIO_new_mem_buf 'key' failed(len=%d)"),
//                   length);
//    goto FINAL;
//  }
//
//  PEM_read_bio_RSAPrivateKey(bio_key, &rsa, 0, NULL);
//  if (NULL == rsa) {
//    printf(("[loadCertificates] PEM_read_bio_RSAPrivateKey failed(len=%d)"),
//           length);
//    goto FINAL;
//  }
//
//  // set the private key from Memory
//  rtn = SSL_CTX_use_RSAPrivateKey(ctx, rsa);
//  if (rtn <= 0) {
//    printf(
//        "[loadCertificates] SSL_CTX_use_RSAPrivateKey failed(rtn=%d,len=%d)",
//        rtn, length);
//    goto FINAL;
//  }
//
//  if (false == SSL_CTX_check_private_key(ctx)) {
//    printf(("[loadCertificates] SSL_CTX_check_private_key failed\n"));
//    goto FINAL;
//  }
//
//  // success
//  bResult = TRUE;
//
//FINAL:
//  if (pbuffer) {
//    free(pbuffer);
//    pbuffer = NULL;
//  }
//
//  if (bio_cert) {
//    BIO_free(bio_cert);
//    bio_cert = NULL;
//  }
//  if (bio_key) {
//    BIO_free(bio_key);
//    bio_key = NULL;
//  }
//  if (cert) {
//    X509_free(cert);
//    cert = NULL;
//  }
//  if (rsa) {
//    rsa = NULL;
//  }
//
//  return bResult;
//}
//
//
//static SSL_CTX* TCPServerSSL2(int nCertMode) {
//  
//  SSL_CTX* ctx = getServerCTX();
//  if (NULL == ctx) {
//    printf(("[threadTCPServerSSL2] initServerCTX failed."));
//    return 0L;
//  }
//
//  bool bResult = loadCertificates(ctx, nCertMode);
//  if (bResult == false) {
//    _FREE_SSL_CTX(ctx);
//
//    printf(("[threadTCPServerSSL2] loadCertificates failed(mode=%d)"),
//           nCertMode);
//    return 0L;
//  }
//
//  return ctx;
//
//  WSADATA wsaData = {
//      0x00,
//  };
//  ::WSAStartup(MAKEWORD(2, 2), &wsaData);
//
//  SOCKADDR_IN servAddr = {
//      0x00,
//  };
//
//  SOCKET sockServer = socket(PF_INET, SOCK_STREAM, 0);
//
//  int nServerPort = 9559;
//
//  if (sockServer == INVALID_SOCKET) {
//    printf(("[threadTCPServerSSL2] socket() failed(errno=%ld)"),
//           ::WSAGetLastError());
//    goto FINAL;
//  }
//
//  servAddr.sin_family = AF_INET;
//  servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
//  servAddr.sin_port = htons(nServerPort);
//
//FINAL:
//  printf(("[threadTCPServerSSL2] stop server(mode=%d,port=%d)"), nCertMode,
//         nServerPort);
//
//  if (sockServer != INVALID_SOCKET) {
//    closesocket(sockServer);
//  }
//
//  _FREE_SSL_CTX(ctx);
//
//  ::WSACleanup();
//
//  return 0L;
//}
